Modul:
    def save(self, *args, **kwargs):
        # image = self.image
        # img = Image.open(image)
        # min_height, min_width = self.MIN_RESOLUTION
        # max_height, max_width = self.MAX_RESOLUTION
        
        # if img.height < min_height or img.width < min_width:
        #     raise MinResolutionErrorException('Rasm formati tugri emas!')
        # if img.height > max_height or img.width > max_width:
        #     raise MaxResolutionErrorException('Rasm formati tugri emas!')
        image = self.image
        img = Image.open(image)
        new_img = img.convert('RGB')
        resized_new_img = new_img.resize((200, 200), Image.ANTIALIAS)
        filestrean = BytesIO
        resized_new_img.save(filestrean, 'JPEG', quality=98)
        filestrean.seek(0)
        name = '{}.{}'.format(*self.image.name.split('.'))
        print(self.image.name, name)
        self.image = InMemoryUploadedFile(
            filestrean, 'ImageField', name, 'jpeg/image', sys.getsizeof(filestrean), None
        )
        super().save(*args, **kwargs) 









Admin:
    def clean_image(self):
        image = self.cleaned_data['image']
        img = Image.open(image)
        min_height, min_width = Product.MIN_RESOLUTION
        max_height, max_width = Product.MAX_RESOLUTION
        if image.size > Product.MAX_IMAGE_SIZE:
            raise ValidationError('Rasm razmeri 3MB dan kop!')
        if img.height < min_height or img.width < min_width:
            raise ValidationError('Rasm formati tugri emas!')
        if img.height > max_height or img.width > max_width:
            raise ValidationError('Rasm formati tugri emas!')
        return image


    

    class NotebookAdminForm(ModelForm):
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['image'].help_text = mark_safe(
            """<span style="color:red; font-size:14px;"><b>Rasm formati  {}x{}dan kam  bo`lishi kerak</b></span>""".format(
            *Product.MAX_RESOLUTION
        ))